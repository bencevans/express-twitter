/* PLEASE DON'T EDIT THIS FILE AS IT'S AUTOGENERATED. 
 * The source is index.coffee. Change that.
 */

(function() {
  var T;
  'express,oauth,sys,winston'.split(',').forEach(function(lib) {
    return eval("" + lib + " = require('" + lib + "')");
  });
  T = {
    login: function(req, res) {
      return T.consumer.getOAuthRequestToken(function(error, oauthToken, oauthTokenSecret, results) {
        if (error) {
          T.log.info("login error " + error);
          return T.sendError(req, res, "Error getting OAuth request token : " + sys.inspect(error), 500);
        } else {
          req.session || (req.session = {});
          req.session.oauthRequestToken = oauthToken;
          req.session.oauthRequestTokenSecret = oauthTokenSecret;
          return res.redirect("https://twitter.com/oauth/authorize?oauth_token=" + req.session.oauthRequestToken);
        }
      });
    },
    logout: function(req, res) {
      T.log.info("" + req.session.twitter.name + " logged out");
      delete req.session.twitter;
      return res.redirect(T.options.afterLogout);
    },
    callback: function(req, res) {
      return T.consumer.getOAuthAccessToken(req.session.oauthRequestToken, req.session.oauthRequestTokenSecret, req.query.oauth_verifier, function(err, oauthAccessToken, oauthAccessTokenSecret, results) {
        if (err) {
          T.sendError(req, res, ("Error getting OAuth access token : " + (sys.inspect(err))) + ("[" + oauthAccessToken + "] [" + oauthAccessTokenSecret + "] [" + (sys.inspect(results)) + "]"));
        }
        console.log("results", results, typeof results);
        req.session.twitter = {
          accessToken: oauthAccessToken,
          accessTokenSecret: oauthAccessTokenSecret,
          name: results.screen_name
        };
        res.redirect(T.options.afterLogin);
        return console.log("Redirected to " + T.options.afterLogin);
      });
    },
    sendError: function(req, res, err) {
      if (err) {
        T.log.info("Login error " + err);
        if (process.env['NODE_ENV'] === 'development') {
          return res.send("Login error: " + err, 500);
        } else {
          return res.send('<h1>Sorry, a login error occurred</h1>', 500);
        }
      } else {
        return res.redirect('/');
      }
    },
    debug: function(req, res) {
      var m;
      if (process.env['NODE_ENV'] !== 'development') {
        return res.send('', 404);
      }
      m = '<p><a href="/sessions/login">Login</a> <a href="/sessions/logout">Logout</a></p><h1>Session</h1>';
      if (req.session) {
        m += "<details><summary>exists</summary><pre>" + (sys.inspect(req.session)) + "</pre></details>";
      } else {
        m = '<p>No session. Make sure you included cookieDecoder and session middleware BEFORE twitter.</p>';
      }
      return res.send(m);
    },
    emptyLogger: {
      debug: function() {
        return null;
      },
      info: function() {
        return null;
      }
    },
    middleware: function(_options) {
      var _base, _base2;
      T.options = _options || {};
      (_base = T.options).afterLogin || (_base.afterLogin = '/');
      (_base2 = T.options).afterLogout || (_base2.afterLogout = '/');
      T.log = T.options.logging ? winston : T.emptyLogger;
      T.consumer = new oauth.OAuth("https://twitter.com/oauth/request_token", "https://twitter.com/oauth/access_token", T.options.consumerKey, T.options.consumerSecret, "1.0A", "" + T.options.baseURL + "/sessions/callback", "HMAC-SHA1");
      return function(req, res, next) {
        var action;
        if (req.url === '/sessions/login') {
          action = T.login;
        } else if (req.url === '/sessions/logout') {
          action = T.logout;
        } else if (req.url === '/sessions/debug') {
          action = T.debug;
        } else if (req.url.match(/^\/sessions\/callback/)) {
          action = T.callback;
        }
        if (action) {
          return action(req, res);
        } else {
          return next();
        }
      };
    },
    get: function(apiPath, req, callback) {
      if (req.session.twitter == null) {
        callback('no twitter session');
      }
      return T.consumer.get(apiPath, req.session.twitter.accessToken, req.session.twitter.accessTokenSecret, function(err, data, response) {
        return callback(err, data, response);
      });
    },
    post: function(apiPath, req, body, callback) {
      if (req.session.twitter == null) {
        callback('no twitter session');
      }
      T.consumer.post(apiPath, req.session.twitter.accessToken, req.session.twitter.accessTokenSecret, content);
      return function(err, data, response) {
        return callback(err, data, response);
      };
    }
  };
  module.exports = {
    middleware: T.middleware,
    get: T.get,
    post: T.post
  };
}).call(this);
